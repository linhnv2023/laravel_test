name: CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: laravel-app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --target production .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest --target production .
        
        # Push images to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Trigger Jenkins deployment
      run: |
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.JENKINS_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "parameter": [
              {
                "name": "IMAGE_TAG",
                "value": "${{ github.sha }}"
              },
              {
                "name": "ECR_REGISTRY",
                "value": "${{ steps.login-ecr.outputs.registry }}"
              }
            ]
          }' \
          "${{ secrets.JENKINS_URL }}/job/laravel-deploy/buildWithParameters"

    - name: Deploy to AWS ECS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: laravel-app
        IMAGE_TAG: ${{ github.sha }}
        ECS_CLUSTER: laravel-cluster
        ECS_SERVICE: laravel-service
        ECS_TASK_DEFINITION: laravel-task
      run: |
        # Update ECS task definition
        aws ecs describe-task-definition \
          --task-definition $ECS_TASK_DEFINITION \
          --query taskDefinition > task-definition.json
        
        # Update image in task definition
        jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" \
           '.containerDefinitions[0].image = $IMAGE' \
           task-definition.json > updated-task-definition.json
        
        # Register new task definition
        aws ecs register-task-definition \
          --cli-input-json file://updated-task-definition.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text > task-definition-arn.txt
        
        # Update ECS service
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --task-definition $(cat task-definition-arn.txt)
        
        # Wait for deployment to complete
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE

    - name: Run database migrations
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: laravel-app
        IMAGE_TAG: ${{ github.sha }}
        ECS_CLUSTER: laravel-cluster
        ECS_SUBNET_ID: ${{ secrets.ECS_SUBNET_ID }}
        ECS_SECURITY_GROUP_ID: ${{ secrets.ECS_SECURITY_GROUP_ID }}
      run: |
        # Run migration task
        aws ecs run-task \
          --cluster $ECS_CLUSTER \
          --task-definition laravel-migration-task \
          --network-configuration "awsvpcConfiguration={subnets=[$ECS_SUBNET_ID],securityGroups=[$ECS_SECURITY_GROUP_ID],assignPublicIp=ENABLED}" \
          --overrides '{
            "containerOverrides": [
              {
                "name": "laravel-app",
                "command": ["php", "artisan", "migrate", "--force"]
              }
            ]
          }'

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  rollback:
    runs-on: ubuntu-latest
    if: failure()
    needs: deploy
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Rollback ECS service
      env:
        ECS_CLUSTER: laravel-cluster
        ECS_SERVICE: laravel-service
      run: |
        # Get previous task definition
        PREVIOUS_TASK_DEF=$(aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --query 'services[0].deployments[1].taskDefinition' \
          --output text)
        
        # Rollback to previous version
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --task-definition $PREVIOUS_TASK_DEF
        
        # Wait for rollback to complete
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: 'warning'
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: 'Deployment failed and has been rolled back to previous version'
