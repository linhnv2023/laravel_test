# CI/CD Pipeline Configuration
# This file contains configuration for the complete CI/CD pipeline

pipeline:
  name: Laravel CI/CD Pipeline
  description: Complete CI/CD pipeline for Laravel application with GitHub, Jenkins, and AWS
  
  # Source Control
  source:
    provider: github
    repository: your-username/laravel-app
    branches:
      main: production
      develop: staging
    
  # Continuous Integration (GitHub Actions)
  ci:
    provider: github-actions
    triggers:
      - push
      - pull_request
    
    stages:
      - name: test
        jobs:
          - php-tests
          - security-scan
          - code-quality
      
      - name: build
        jobs:
          - docker-build
          - vulnerability-scan
    
    environments:
      test:
        php_version: "8.3"
        node_version: "20"
        services:
          - mysql:8.0
          - redis:7-alpine
    
    notifications:
      slack:
        channel: "#ci-cd"
        on_success: true
        on_failure: true

  # Continuous Deployment
  cd:
    provider: mixed  # GitHub Actions + Jenkins
    
    # GitHub Actions handles initial build and push to ECR
    github_actions:
      triggers:
        - workflow_run: "CI Pipeline"
          branches: [main]
          condition: success
      
      steps:
        - build_production_image
        - push_to_ecr
        - trigger_jenkins_deployment
    
    # Jenkins handles deployment to AWS
    jenkins:
      server: "https://jenkins.your-domain.com"
      jobs:
        - name: "laravel-deploy"
          parameters:
            - IMAGE_TAG
            - ECR_REGISTRY
            - ENVIRONMENT
        - name: "laravel-rollback"
          parameters:
            - ENVIRONMENT
            - ROLLBACK_TO_REVISION
    
    # AWS Infrastructure
    aws:
      region: us-east-1
      services:
        - ecs
        - ecr
        - rds
        - elasticache
        - alb
      
      environments:
        staging:
          cluster: staging-laravel-cluster
          service: staging-laravel-service
          desired_count: 1
          cpu: 512
          memory: 1024
        
        production:
          cluster: production-laravel-cluster
          service: production-laravel-service
          desired_count: 2
          cpu: 1024
          memory: 2048

# Required Secrets and Environment Variables
secrets:
  github:
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - AWS_REGION
    - ECR_REGISTRY
    - JENKINS_URL
    - JENKINS_API_TOKEN
    - SLACK_WEBHOOK
    - SNYK_TOKEN
  
  jenkins:
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - ECS_SUBNET_ID
    - ECS_SECURITY_GROUP_ID
    - SLACK_API_TOKEN
  
  aws:
    - DB_PASSWORD
    - APP_KEY

# Deployment Strategy
deployment:
  strategy: blue-green
  
  health_checks:
    endpoint: "/health"
    timeout: 300
    retries: 5
    interval: 30
  
  rollback:
    automatic: true
    conditions:
      - health_check_failure
      - deployment_timeout
    
  notifications:
    channels:
      - slack: "#deployments"
      - email: "devops@your-company.com"

# Monitoring and Observability
monitoring:
  metrics:
    - application_health
    - response_time
    - error_rate
    - resource_utilization
  
  logging:
    centralized: true
    retention_days: 30
    
  alerts:
    - name: "High Error Rate"
      condition: "error_rate > 5%"
      severity: critical
    
    - name: "High Response Time"
      condition: "avg_response_time > 2s"
      severity: warning
    
    - name: "Low Health Score"
      condition: "health_score < 90%"
      severity: warning

# Security
security:
  vulnerability_scanning:
    enabled: true
    tools:
      - snyk
      - trivy
    
  secrets_management:
    provider: aws-secrets-manager
    rotation: enabled
    
  compliance:
    - container_scanning
    - dependency_scanning
    - license_scanning

# Quality Gates
quality_gates:
  code_coverage:
    minimum: 80
    
  security_vulnerabilities:
    high: 0
    medium: 5
    
  performance:
    build_time: 600  # seconds
    deployment_time: 300  # seconds

# Backup and Recovery
backup:
  database:
    frequency: daily
    retention: 30  # days
    
  application_data:
    frequency: daily
    retention: 7  # days
    
  disaster_recovery:
    rto: 4  # hours
    rpo: 1  # hour
