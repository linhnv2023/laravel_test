# ==========================================
# Laravel Docker Development Environment
# ==========================================
# Khởi động: docker-compose up -d
# Dừng: docker-compose down

services:
  # ==========================================
  # LARAVEL APPLICATION CONTAINER
  # ==========================================
  app:
    # Build image từ Dockerfile trong thư mục hiện tại
    build:
      context: .                    # Thư mục chứa Dockerfile
      dockerfile: Dockerfile        # Tên file Dockerfile

    container_name: laravel-app     # Tên container (dễ nhận biết)
    restart: unless-stopped         # Tự động restart khi container bị crash
    working_dir: /app              # Thư mục làm việc bên trong container

    # Mount volumes (chia sẻ files giữa host và container)
    volumes:
      - ./:/app                     # Mount toàn bộ source code (development)
      - ./docker/php/php.ini:/usr/local/etc/php/conf.d/custom.ini  # PHP config

    # Expose port ra ngoài
    ports:
      - "8000:8000"                # Host:Container - truy cập qua localhost:8000

    # Biến môi trường cho Laravel
    environment:
      - APP_ENV=${APP_ENV:-local}           # Môi trường (local/staging/production)
      - APP_DEBUG=${APP_DEBUG:-true}        # Debug mode (true cho development)
      - APP_KEY=${APP_KEY:-}                # Laravel application key (bảo mật)
      - DB_CONNECTION=mysql                 # Loại database sử dụng
      - DB_HOST=mysql                       # Hostname database (tên container)
      - DB_PORT=3306                        # Port database
      - DB_DATABASE=${DB_DATABASE:-laravel} # Tên database
      - DB_USERNAME=${DB_USERNAME:-laravel} # Username database
      - DB_PASSWORD=${DB_PASSWORD:-secret}  # Password database
      - REDIS_HOST=redis                    # Hostname Redis (tên container)
      - REDIS_PORT=6379                     # Port Redis
      - CACHE_DRIVER=redis                  # Sử dụng Redis cho cache
      - SESSION_DRIVER=redis                # Sử dụng Redis cho sessions
      - QUEUE_CONNECTION=redis              # Sử dụng Redis cho queue jobs
      - RUN_MIGRATIONS=${RUN_MIGRATIONS:-false}  # Tự động chạy migrations
      - RUN_SEEDERS=${RUN_SEEDERS:-false}        # Tự động chạy seeders

    # Đợi các services khác healthy trước khi start
    depends_on:
      mysql:
        condition: service_healthy  # Đợi MySQL sẵn sàng
      redis:
        condition: service_healthy  # Đợi Redis sẵn sàng

    # Kết nối network
    networks:
      - laravel-network            # Network để containers giao tiếp với nhau

    # Health check - kiểm tra container có hoạt động không
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]  # Gửi HTTP request
      interval: 30s                # Kiểm tra mỗi 30 giây
      timeout: 10s                 # Timeout sau 10 giây
      retries: 3                   # Thử lại 3 lần nếu fail
      start_period: 40s            # Đợi 40 giây trước khi bắt đầu check

  # ==========================================
  # NGINX WEB SERVER (OPTIONAL - CHỈ CHO PRODUCTION)
  # ==========================================
  # Khởi động: docker-compose --profile nginx up -d
  nginx:
    image: nginx:alpine            # Sử dụng Nginx Alpine (nhẹ, bảo mật)
    container_name: laravel-nginx  # Tên container
    restart: unless-stopped        # Tự động restart

    # Expose ports HTTP và HTTPS
    ports:
      - "80:80"                    # HTTP port
      - "443:443"                  # HTTPS port (cần SSL certificate)

    # Mount configurations và SSL certificates
    volumes:
      - ./:/var/www/html           # Mount source code (cho static files)
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf      # Nginx main config
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf  # Site config
      - ./docker/ssl:/etc/nginx/ssl  # SSL certificates (nếu có)

    # Đợi app container sẵn sàng
    depends_on:
      - app                        # Nginx proxy requests đến app container

    networks:
      - laravel-network            # Cùng network với app

    # Profile - chỉ start khi cần (production)
    profiles:
      - nginx                      # docker-compose --profile nginx up -d

  # ==========================================
  # MYSQL DATABASE CONTAINER
  # ==========================================
  mysql:
    image: mysql:8.0               # MySQL version 8.0 (stable, performance tốt)
    container_name: laravel-mysql  # Tên container
    restart: unless-stopped        # Tự động restart (quan trọng cho database)

    # Expose port để có thể connect từ bên ngoài (tools như phpMyAdmin)
    ports:
      - "3306:3306"                # Host:Container - connect qua localhost:3306

    # Biến môi trường để tạo database và user
    environment:
      MYSQL_DATABASE: laravel      # Tên database sẽ được tạo tự động
      MYSQL_USER: laravel          # Username cho Laravel app
      MYSQL_PASSWORD: secret       # Password cho user laravel
      MYSQL_ROOT_PASSWORD: root_secret  # Password cho root user
      MYSQL_ALLOW_EMPTY_PASSWORD: "no"  # Không cho phép password rỗng (bảo mật)

    # Persistent storage và configuration
    volumes:
      - mysql_data:/var/lib/mysql  # Volume lưu trữ data (persistent)
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf  # MySQL configuration

    networks:
      - laravel-network            # Network để app có thể connect

    # Health check - kiểm tra MySQL có sẵn sàng nhận connections
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "laravel", "-psecret"]
      interval: 30s                # Kiểm tra mỗi 30 giây
      timeout: 10s                 # Timeout sau 10 giây
      retries: 5                   # Thử lại 5 lần (database cần thời gian khởi động)
      start_period: 30s            # Đợi 30 giây trước khi bắt đầu check

  # ==========================================
  # REDIS CACHE & SESSION STORE
  # ==========================================
  redis:
    image: redis:7-alpine          # Redis version 7 Alpine (nhẹ, nhanh)
    container_name: laravel-redis  # Tên container
    restart: unless-stopped        # Tự động restart

    # Expose port để có thể connect từ bên ngoài (Redis tools)
    ports:
      - "6379:6379"                # Host:Container - connect qua localhost:6379

    # Persistent storage và configuration
    volumes:
      - redis_data:/data           # Volume lưu trữ Redis data (persistent)
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf  # Redis config

    # Chạy Redis với custom configuration
    command: redis-server /usr/local/etc/redis/redis.conf

    networks:
      - laravel-network            # Network để app có thể connect

    # Health check - kiểm tra Redis có phản hồi
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]  # Gửi PING command
      interval: 30s                # Kiểm tra mỗi 30 giây
      timeout: 10s                 # Timeout sau 10 giây
      retries: 3                   # Thử lại 3 lần
      start_period: 30s            # Đợi 30 giây trước khi bắt đầu check

  # ==========================================
  # QUEUE WORKER - XỬ LÝ BACKGROUND JOBS
  # ==========================================
  queue:
    # Sử dụng cùng image với app container
    build:
      context: .                   # Build từ cùng Dockerfile
      dockerfile: Dockerfile

    container_name: laravel-queue  # Tên container
    restart: unless-stopped        # Tự động restart (quan trọng cho queue worker)
    working_dir: /app             # Thư mục làm việc

    # Mount source code để có thể chạy Laravel commands
    volumes:
      - ./:/app                    # Mount source code

    # Override entrypoint để chạy queue worker thay vì web server
    entrypoint: []                 # Xóa entrypoint mặc định
    command: php artisan queue:work --verbose --tries=3 --timeout=90
    # --verbose: hiển thị chi tiết
    # --tries=3: thử lại 3 lần nếu job fail
    # --timeout=90: timeout job sau 90 giây

    # Biến môi trường (cần thiết để connect database, Redis)
    environment:
      - APP_ENV=local              # Môi trường
      - DB_CONNECTION=mysql        # Database connection
      - DB_HOST=mysql              # Database host
      - DB_PORT=3306               # Database port
      - DB_DATABASE=laravel        # Database name
      - DB_USERNAME=laravel        # Database username
      - DB_PASSWORD=secret         # Database password
      - REDIS_HOST=redis           # Redis host (queue driver)
      - REDIS_PORT=6379            # Redis port

    # Đợi database và Redis sẵn sàng
    depends_on:
      - mysql                      # Cần database để lưu job status
      - redis                      # Cần Redis để lấy jobs từ queue

    networks:
      - laravel-network            # Cùng network để connect services

  # ==========================================
  # SCHEDULER - XỬ LÝ CRON JOBS
  # ==========================================
  scheduler:
    # Sử dụng cùng image với app container
    build:
      context: .                   # Build từ cùng Dockerfile
      dockerfile: Dockerfile

    container_name: laravel-scheduler  # Tên container
    restart: unless-stopped        # Tự động restart
    working_dir: /app             # Thư mục làm việc

    # Mount source code để có thể chạy Laravel commands
    volumes:
      - ./:/app                    # Mount source code

    # Override entrypoint để chạy scheduler
    entrypoint: []                 # Xóa entrypoint mặc định
    command: sh -c "while true; do php artisan schedule:run; sleep 60; done"
    # Chạy vòng lặp vô hạn:
    # - Chạy php artisan schedule:run (kiểm tra và chạy scheduled tasks)
    # - Sleep 60 giây (Laravel scheduler chạy mỗi phút)
    # - Lặp lại

    # Biến môi trường (cần thiết để connect database, Redis)
    environment:
      - APP_ENV=local              # Môi trường
      - DB_CONNECTION=mysql        # Database connection
      - DB_HOST=mysql              # Database host
      - DB_PORT=3306               # Database port
      - DB_DATABASE=laravel        # Database name
      - DB_USERNAME=laravel        # Database username
      - DB_PASSWORD=secret         # Database password
      - REDIS_HOST=redis           # Redis host
      - REDIS_PORT=6379            # Redis port

    # Đợi database và Redis sẵn sàng
    depends_on:
      - mysql                      # Cần database để lưu scheduled job data
      - redis                      # Cần Redis cho cache và queue

    networks:
      - laravel-network            # Cùng network để connect services

# ==========================================
# DOCKER VOLUMES - LƯU TRỮ PERSISTENT DATA
# ==========================================
volumes:
  # Volume cho MySQL data - data sẽ không bị mất khi restart container
  mysql_data:
    driver: local                  # Lưu trữ local trên host machine

  # Volume cho Redis data - cache và session data persistent
  redis_data:
    driver: local                  # Lưu trữ local trên host machine

# ==========================================
# DOCKER NETWORKS - KẾT NỐI GIỮA CONTAINERS
# ==========================================
networks:
  # Network riêng cho Laravel application
  laravel-network:
    driver: bridge                 # Bridge network - containers có thể giao tiếp với nhau
    # Tất cả containers trong cùng network có thể connect với nhau bằng tên container
