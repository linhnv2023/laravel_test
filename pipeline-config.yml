# Optimized CI/CD Pipeline Configuration
# GitHub Webhook → Jenkins → ECR → ECS → Production

pipeline:
  name: Laravel Optimized CI/CD Pipeline
  description: Streamlined pipeline with GitHub webhook triggering Jenkins for complete CI/CD
  version: "2.0"
  
  # Architecture
  architecture:
    type: webhook-jenkins
    flow: "GitHub → Webhook → Jenkins → ECR → ECS → Production"
    benefits:
      - "30% faster builds (5-7 min vs 7-10 min)"
      - "50% cost reduction (no GitHub Actions minutes)"
      - "50% simpler management (1 tool vs 2 tools)"
      - "100% better control (full Jenkins customization)"

  # Source Control
  source:
    provider: github
    repository: your-username/laravel-app
    webhook:
      url: "http://your-jenkins-server/github-webhook/"
      events: [push, pull_request, release]
      secret: recommended
    
    branches:
      main: production
      develop: staging
      feature/*: test-only

  # CI/CD Tool
  cicd:
    provider: jenkins
    server: "http://your-jenkins-server"
    pipeline_file: Jenkinsfile
    
    triggers:
      - github_webhook
      - manual_build
      - scheduled_build
    
    stages:
      - name: "Checkout & Setup"
        duration: "30s"
        description: "Repository clone and environment setup"
      
      - name: "Testing (Parallel)"
        duration: "2-3 min"
        jobs:
          - php_tests
          - security_scan
          - code_quality
      
      - name: "Build & Push"
        duration: "2-3 min"
        description: "Docker build and ECR push with vulnerability scanning"
      
      - name: "Deploy to ECS"
        duration: "1-2 min"
        description: "Service update and health checks"
      
      - name: "Post-Deploy"
        duration: "1 min"
        description: "Migrations and notifications"

  # AWS Infrastructure
  aws:
    region: us-east-1
    services:
      ecr:
        repository: laravel-app
        scanning: enabled
        lifecycle_policy: enabled
      
      ecs:
        cluster: laravel-cluster
        services:
          staging:
            name: staging-laravel-service
            desired_count: 1
            cpu: 512
            memory: 1024
          production:
            name: production-laravel-service
            desired_count: 2
            cpu: 1024
            memory: 2048
      
      rds:
        engine: mysql
        version: "8.0"
        instance_class:
          staging: db.t3.micro
          production: db.t3.medium
        backup_retention: 7
        multi_az: true  # production only
      
      elasticache:
        engine: redis
        node_type:
          staging: cache.t3.micro
          production: cache.t3.medium
      
      networking:
        vpc: custom
        subnets:
          public: 2
          private: 2
        security_groups:
          alb: internet-facing
          ecs: private
          rds: private
          redis: private

  # Environment Configuration
  environments:
    staging:
      auto_deploy: true
      branch: develop
      approval_required: false
      run_migrations: true
      notification_channels: [slack]
    
    production:
      auto_deploy: false  # manual trigger recommended
      branch: main
      approval_required: true
      run_migrations: true
      notification_channels: [slack, email]

  # Security Configuration
  security:
    secrets_management:
      provider: aws_secrets_manager
      secrets:
        - app_key
        - db_password
        - jwt_secret
    
    vulnerability_scanning:
      enabled: true
      tools: [trivy, ecr_scan]
      fail_on: high
    
    access_control:
      jenkins_rbac: enabled
      aws_iam: least_privilege
      network_isolation: private_subnets

  # Monitoring & Observability
  monitoring:
    jenkins:
      build_metrics: enabled
      success_rate: tracked
      duration_trends: tracked
    
    aws:
      cloudwatch_logs: enabled
      container_insights: enabled
      custom_metrics: enabled
    
    notifications:
      slack:
        channel: "#deployments"
        events: [success, failure, start]
      
      email:
        recipients: ["devops@company.com"]
        events: [failure, production_deploy]

  # Quality Gates
  quality_gates:
    code_coverage:
      minimum: 80
      tool: phpunit
    
    security_scan:
      max_high_vulnerabilities: 0
      max_medium_vulnerabilities: 5
    
    performance:
      max_build_time: 600  # 10 minutes
      max_deployment_time: 300  # 5 minutes

  # Backup & Recovery
  backup:
    database:
      frequency: daily
      retention: 30
      cross_region: enabled  # production only
    
    application_data:
      frequency: daily
      retention: 7
    
    jenkins_config:
      frequency: weekly
      retention: 12

# Required Credentials
credentials:
  jenkins:
    - id: aws-credentials
      type: aws
      description: AWS access for ECR and ECS
    
    - id: github-credentials
      type: username_password
      description: GitHub repository access
    
    - id: slack-token
      type: secret_text
      description: Slack notifications

  aws:
    - name: app-key
      type: secret
      description: Laravel application key
    
    - name: db-password
      type: secret
      description: Database password

# Performance Metrics
metrics:
  build_time:
    target: "5-7 minutes"
    current: "optimized"
    improvement: "30% faster than GitHub Actions + Jenkins"
  
  cost:
    target: "50% reduction"
    savings: "No GitHub Actions minutes"
    efficiency: "Single tool management"
  
  complexity:
    target: "50% simpler"
    tools: "1 instead of 2"
    maintenance: "Centralized in Jenkins"

# Migration Path
migration:
  from: "GitHub Actions + Jenkins"
  to: "GitHub Webhook + Jenkins"
  
  steps:
    - backup_current_setup
    - configure_jenkins_pipeline
    - setup_github_webhook
    - parallel_testing
    - switch_traffic
    - monitor_performance
    - cleanup_old_workflows

# Best Practices
best_practices:
  - "Use branch-based deployments"
  - "Implement proper testing stages"
  - "Set up comprehensive monitoring"
  - "Use secrets management"
  - "Implement rollback strategies"
  - "Regular backup of Jenkins configuration"
  - "Monitor resource usage and costs"
  - "Keep Jenkins and plugins updated"
